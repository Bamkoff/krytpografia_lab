#  Zaimplementuj algorytm, który koduje wiadomość na punkt na krzywej eliptycznej.
#  Dane: M, E=[A, B, p]
#  Wynik: PM= (x, y)∈E(Fp) zakodowana wiadomość M

import random


def find_b(a, p):
    if p % 4 == 3:
        b = 0
        if check_if_rest_squared(a, p):
            b = effective_power(a, int((p + 1) // 4), p)
            return b, p - b
    return None, None


def check_if_rest_squared(b: int, p: int):
    temp: int = effective_power(b, int((p - 1) // 2), p)
    if temp == 1:
        return True
    else:
        return False


def effective_power(b, k, n):
    y = 1
    binary = list(reversed(bin(k)[2:]))
    i = len(binary) - 1
    while i >= 0:
        y = (y ** 2) % n
        if binary[i] == "1":
            y = (y * b) % n
        i = i - 1
    return y


def message_into_point(M, A, B, p):
    N = random.randint(1, int(0.05 * p)) + M
    mi = random.randint(1, p // N)
    print(
        "N = ", N,
        "\nmi = ", mi,
    )
    if N * mi < p:
        Mmi = M * mi
        for j in range(1, mi + 1):
            x = Mmi + j
            x = x % p
            f = effective_power(x, 3, p) + A * x + B
            f = f % p
            if check_if_rest_squared(f, p):
                y1, y2 = find_b(f, p)
                if y1 > 0:
                    return x, y1
                else:
                    return x, y2
    return None, None


x, y = message_into_point(12345123451234512345123451234512345123451234512345,
                          29709474828707888605740931202360551565636732792371437120940930181130829730156441891744624,
                          16643302912691321678918065638057012771154811969628502357120229869058194582706473112319932,
                          31338370143412379918310946660817131347405340534853228467935612450555934075843362818014391)

while x is None or y is None:
    x, y = message_into_point(12345123451234512345123451234512345123451234512345,
                              29709474828707888605740931202360551565636732792371437120940930181130829730156441891744624,
                              16643302912691321678918065638057012771154811969628502357120229869058194582706473112319932,
                              31338370143412379918310946660817131347405340534853228467935612450555934075843362818014391)

print("Pm = (", x, ",", y, ")")

# K_A = [
# 	E = [
# 		 A = 29709474828707888605740931202360551565636732792371437120940930181130829730156441891744624
# 		 B = 16643302912691321678918065638057012771154811969628502357120229869058194582706473112319932
# 		]
# 	p = 31338370143412379918310946660817131347405340534853228467935612450555934075843362818014391
# 	P = (
# 		x = 20318404056883532543627023358850632855600525569321715204771631283211488553996097309248614
# 		y = 33988889906847781819777291710892235323960728928507600006177399682326446309188431478570
# 		)
# 	Q = (
# 		x = 21720083656656870367448257189114242786563415880520465482286418739685583008238067726266194
# 		y = 2644069807894390155787384486719295976943340118365164697373586635540489953969384268657147
# 		)
# 	]
# k_A = [
# 	E = [
# 		 A = 29709474828707888605740931202360551565636732792371437120940930181130829730156441891744624
# 		 B = 16643302912691321678918065638057012771154811969628502357120229869058194582706473112319932
# 		]
# 	p = 31338370143412379918310946660817131347405340534853228467935612450555934075843362818014391
# 	P = (
# 		x = 20318404056883532543627023358850632855600525569321715204771631283211488553996097309248614
# 		y = 33988889906847781819777291710892235323960728928507600006177399682326446309188431478570
# 		)
# 	Q = (
# 		x = 21720083656656870367448257189114242786563415880520465482286418739685583008238067726266194
# 		y = 2644069807894390155787384486719295976943340118365164697373586635540489953969384268657147
# 		)
# 	x = 30522600394850359276797965801607800013346792425205967505486741975047388827950515851621210
# 	]
