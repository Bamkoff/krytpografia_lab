# Zaimplementuj algorytm (funkcję), która oblicza P⊕Q sumę punktów krzywej eliptycz-nych.
# Zaimplementuj wszystkie przypadki.
# Dane:P=(x1, y1), Q=(x2, y2)∈E(Fp) oraz A, B, p=3 (mod 4) takie, żeE:Y2=X^3+AX+B jest krzywą nad Fp
# Wynik: R=(x3, y3)∈E(Fp) taki, że R = P⊕Q.


def effective_power(b, k, n):
    y = 1
    binary = list(reversed(bin(k)[2:]))
    i = len(binary) - 1
    while i >= 0:
        y = (y ** 2) % n
        if binary[i] == "1":
            y = (y * b) % n
        i = i - 1
    return y


def reverse_element(n, b):
    A = n
    B = b
    U = 0
    V = 1
    while B != 0:
        q = A // B
        temp = A
        A = B
        B = temp + (-q * B)
        temp = U
        U = V
        V = temp + (-q * V)
    if U < 0:
        return n + U
    return U


def opposed_point(x, y, p):
    return x, p-y


def sum_points(x1: int, y1: int, x2: int, y2: int, A: int, B: int, p: int):
    if (x1, y1) == opposed_point(x2, y2, p):
        return None, None
    elif x1 == x2 and y1 == y2:
        fi = ((3 * effective_power(x1, 2, p) + A) * reverse_element(p, (2*y1) % p)) % p
        x3 = (effective_power(fi, 2, p) - 2*x1) % p
        return x3, (fi * (x1 - x3) - y1) % p
    else:
        fi = ((y2 - y1) * reverse_element(p, (x2 - x1) % p)) % p
        x3 = (effective_power(fi, 2, p) - x1 - x2) % p
        return x3, (fi * (x1 - x3) - y1) % p


# print(sum_points(285113634279465403319996581740169338329454608669814309137990174814243655992779447106132850,
#                  598700530906084162596261101440667782569915319623798143751082061599951188013331503150304328,
#                  285113634279465403319996581740169338329454608669814309137990174814243655992779447106132850,
#                  598700530906084162596261101440667782569915319623798143751082061599951188013331503150304328,
#                  239614427021073265587611886177902927263167863041565491257781227550405368115731464059190159,
#                  447169285435982716467332439542997876345372330045685811964291613238129105735899852114277221,
#                  1183779584357076950937981497685946292711107412152534481102525547387604378262522402526266939))
#
# print(sum_points(285113634279465403319996581740169338329454608669814309137990174814243655992779447106132850,
#                  598700530906084162596261101440667782569915319623798143751082061599951188013331503150304328,
#                  325444025071104883960052346646906281653168947717483856065189670953437479881729452798608077,
#                  239125487170003996135655430618708771919328968254470557948780573789164710859090020473322961,
#                  239614427021073265587611886177902927263167863041565491257781227550405368115731464059190159,
#                  447169285435982716467332439542997876345372330045685811964291613238129105735899852114277221,
#                  1183779584357076950937981497685946292711107412152534481102525547387604378262522402526266939))

print(sum_points(5675582609528509755154596976219436882800940202133009615493636528796068792051666301553005077,
                 2681222466321576306308374710969852655317643513295545210109514788202770655607359467945594187,
                 5675582609528509755154596976219436882800940202133009615493636528796068792051666301553005077,
                 2681222466321576306308374710969852655317643513295545210109514788202770655607359467945594187,
                 2618620714587403884342009361212186809368462386034929623466018324108853976882143882853152638,
                 3133263006234534182473693690482114854105190312960708359807890166052239987120465538809706116,
                 6479871572482746726171440100382299339450127532237655270738871684804154465566342446884895803))

print(sum_points(5675582609528509755154596976219436882800940202133009615493636528796068792051666301553005077,
                 2681222466321576306308374710969852655317643513295545210109514788202770655607359467945594187,
                 5709658867054669928446605569046346257747534458925509100768077764812297649683265304695694780,
                 4483150207164241879289721494515676365907060031757053876762999595231936839437559030579849133,
                 2618620714587403884342009361212186809368462386034929623466018324108853976882143882853152638,
                 3133263006234534182473693690482114854105190312960708359807890166052239987120465538809706116,
                 6479871572482746726171440100382299339450127532237655270738871684804154465566342446884895803))